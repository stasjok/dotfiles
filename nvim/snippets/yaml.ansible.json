{
  "pre_tasks": {
    "prefix": "pre_tasks",
    "body": "pre_tasks:\n\t- ${1:name: ${2:task name}}",
    "description": "A list of tasks to execute before roles"
  },
  "roles": {
    "prefix": "roles",
    "body": "roles:\n\t- ${1:role_name}",
    "description": "List of roles to be imported into the play"
  },
  "tasks": {
    "prefix": "tasks",
    "body": "tasks:\n\t- ${1:name: ${2:task name}}",
    "description": "Main list of tasks to execute in the play"
  },
  "post_tasks": {
    "prefix": "post_tasks",
    "body": "post_tasks:\n\t- ${1:name: ${2:task name}}",
    "description": "A list of tasks to execute after the tasks section"
  },
  "role": {
    "prefix": "role",
    "body": "role: ${1:role_name}\n\tvars:\n\t\t${2:key}: ${3:value}",
    "description": "Role with vars"
  },
  "state": {
    "prefix": "state",
    "body": "state: ${1:absent}",
    "description": "Task state"
  },
  "loop": {
    "prefix": "loop",
    "body": "loop:\n\t- ${1:item1}",
    "description": "Loop over list"
  },
  "loopv": {
    "prefix": "loopv",
    "body": "loop: \"{{ ${1:variable} }}\"",
    "description": "Loop over variable"
  },
  "loop_control": {
    "prefix": "loop_control",
    "body": "loop_control:\n\tloop_var: ${1:item}\n\tlabel: \"{{ ${2:${1}.${3:name}} }}\"",
    "description": "Loop control"
  },
  "v": {
    "prefix": "v",
    "body": "\"{{ ${1:item} }}\"",
    "description": "Variable"
  },
  "vd": {
    "prefix": "vd",
    "body": "\"{{ ${1:var_name} | default(${2:omit}) }}\"",
    "description": "Variable with default"
  },
  "vars": {
    "prefix": "vars",
    "body": "vars:\n\t${1:var_name}: ${2:\"\\{\\{ ${3:other_var} \\}\\}\"}",
    "description": "Dictionary/map of variables"
  },
  "vars_files": {
    "prefix": "vars_files",
    "body": "vars_files:\n\t- ${1:var_file}",
    "description": "List of files that contain vars to include in the play"
  },
  "become": {
    "prefix": "become",
    "body": "become: ${1:yes}",
    "description": "Privilege escalation"
  },
  "become_user": {
    "prefix": "become_user",
    "body": "become_user: ${1:root}",
    "description": "User that you 'become' after using privilege escalation"
  },
  "become_method": {
    "prefix": "become_method",
    "body": "become_method: ${1:su}",
    "description": "Which method of privilege escalation to use"
  },
  "check_mode": {
    "prefix": "check_mode",
    "body": "check_mode: ${1:no}",
    "description": "A boolean that controls if a task is executed in 'check' mode"
  },
  "ignore_errors": {
    "prefix": "ignore_errors",
    "body": "ignore_errors: ${1:yes}",
    "description": "Ignore task failures and continue with play"
  },
  "no_log": {
    "prefix": "no_log",
    "body": "no_log: ${1:yes}",
    "description": "Information disclosure"
  },
  "env": {
    "prefix": "env",
    "body": "environment:\n\t${1:ENV_VAR}: ${2:value}",
    "description": "Setting the Environment"
  },
  "run_once": {
    "prefix": "run_once",
    "body": "run_once: ${1:yes}",
    "description": "Force the task to attempt to execute on the first host available"
  },
  "tags": {
    "prefix": "tags",
    "body": "tags:\n\t- ${1:always}",
    "description": "Tags applied to the task"
  },
  "delegate_to": {
    "prefix": "delegate_to",
    "body": "delegate_to: ${1:127.0.0.1}",
    "description": "Host to execute task instead of the target"
  },
  "register": {
    "prefix": "register",
    "body": "register: ${1:var_name}",
    "description": "Name of variable that will contain task status"
  },
  "when": {
    "prefix": "when",
    "body": "when: ${1:condition}",
    "description": "Conditional expression"
  },
  "notify": {
    "prefix": "notify",
    "body": "notify: ${1:handler_name}",
    "description": "List of handlers to notify"
  },
  "listen": {
    "prefix": "listen",
    "body": "listen: ${1:handler_name}",
    "description": "Listen to generic topics"
  },
  "dependencies": {
    "prefix": "dependencies",
    "body": "dependencies:\n\t- ${1:role_name}",
    "description": "Role dependencies"
  },
  "file": {
    "prefix": "file",
    "body": "file:\n\tpath: ${1:/path/to}\n\towner: ${2:root}\n\tgroup: ${3:root}\n\tmode: ${4:0644}",
    "description": "Change file or directory permissions"
  },
  "dir": {
    "prefix": "dir",
    "body": "file:\n\tpath: ${1:/path/to/directory}\n\towner: ${2:root}\n\tgroup: ${3:root}\n\tmode: ${4:0755}\n\tstate: directory",
    "description": "Create a directory"
  },
  "link": {
    "prefix": "link",
    "body": "file:\n\tpath: ${1:/path/to/symlink}\n\tsrc: ${2:/link/target}\n\towner: ${3:root}\n\tgroup: ${4:root}\n\tstate: link",
    "description": "Create a symbolic link"
  },
  "hard": {
    "prefix": "hard",
    "body": "file:\n\tpath: ${1:/path/to/hardlink}\n\tsrc: ${2:/link/target}\n\towner: ${3:root}\n\tgroup: ${4:root}\n\tmode: ${5:0644}\n\tstate: hard",
    "description": "Create a hard link"
  },
  "stat": {
    "prefix": "stat",
    "body": "file:\n\tpath: ${1:/path/to}",
    "description": "Get file or directory information"
  },
  "absent": {
    "prefix": "absent",
    "body": "file:\n\tpath: ${1:/path/to}\n\tstate: absent",
    "description": "Delete file or directory"
  },
  "copy": {
    "prefix": "copy",
    "body": "copy:\n\tdest: ${1:/dest/file}\n\tsrc: ${2:${1/.*\\///}}\n\towner: ${3:root}\n\tgroup: ${4:root}\n\tmode: ${5:0644}",
    "description": "Copy a file to a remote server"
  },
  "content": {
    "prefix": "content",
    "body": "copy:\n\tdest: ${1:/dest/file}\n\tcontent: ${2:\"\\{\\{ ${3:variable} \\}\\}\"}\n\towner: ${4:root}\n\tgroup: ${5:root}\n\tmode: ${6:0644}",
    "description": "Set the contents of a file"
  },
  "validate": {
    "prefix": "validate",
    "body": "validate: ${1:${2:command} %s}",
    "description": "The validation command to run before copying into place"
  },
  "template": {
    "prefix": "template",
    "body": "template:\n\tdest: ${1:/dest/file}\n\tsrc: ${2:${1/.*\\///}.j2}\n\towner: ${3:root}\n\tgroup: ${4:root}\n\tmode: ${5:0644}",
    "description": "Template a file out to a remote server"
  },
  "trim_blocks": {
    "prefix": "trim_blocks",
    "body": "trim_blocks: ${1:no}",
    "description": "Trim newlines after Jinja blocks"
  },
  "lstrip_blocks": {
    "prefix": "lstrip_blocks",
    "body": "lstrip_blocks: ${1:yes}",
    "description": "Strip leading whitespaces for Jinja blocks"
  },
  "trim": {
    "prefix": "trim",
    "body": "trim_blocks: ${1:yes}\nlstrip_blocks: ${1:yes}",
    "description": "Jinja whitespace control"
  },
  "line": {
    "prefix": "line",
    "body": "lineinfile:\n\tpath: ${1:/dest/file}\n\tline: ${2:line}",
    "description": "Manage line in text file"
  },
  "lineregexp": {
    "prefix": "lineregexp",
    "body": "lineinfile:\n\tpath: ${1:/dest/file}\n\tline: ${2:line}\n\tregexp: ${3:regexp}",
    "description": "Manage line in text file"
  },
  "lineafter": {
    "prefix": "lineafter",
    "body": "lineinfile:\n\tpath: ${1:/dest/file}\n\tline: ${2:line}\n\tinsertafter: ${3:EOF}",
    "description": "Manage line in text file"
  },
  "linebefore": {
    "prefix": "linebefore",
    "body": "lineinfile:\n\tpath: ${1:/dest/file}\n\tline: ${2:line}\n\tinsertbefore: ${3:BOF}",
    "description": "Manage line in text file"
  },
  "linecreate": {
    "prefix": "linecreate",
    "body": "lineinfile:\n\tpath: ${1:/dest/file}\n\tline: ${2:line}\n\tcreate: yes\n\towner: ${3:root}\n\tgroup: ${4:root}\n\tmode: ${5:0644}",
    "description": "Manage line in text file"
  },
  "linereplace": {
    "prefix": "linereplace",
    "body": "lineinfile:\n\tpath: ${1:/dest/file}\n\tregexp: ${2:regexp}\n\tline: ${3:replacement}\n\tbackrefs: ${4:yes}",
    "description": "Replace line with backrefs in text file"
  },
  "linedelete": {
    "prefix": "linedelete",
    "body": "lineinfile:\n\tpath: ${1:/dest/file}\n\t${2:regexp}: ${3:line}\n\tstate: absent",
    "description": "Delete line in text file"
  },
  "service": {
    "prefix": "service",
    "body": "service:\n\tname: ${1:service_name}\n\tenabled: ${2:yes}\n\tstate: ${3:started}",
    "description": "Manage services"
  },
  "restarted": {
    "prefix": "restarted",
    "body": "service:\n\tname: ${1:service_name}\n\tstate: restarted",
    "description": "Restart a service"
  },
  "reloaded": {
    "prefix": "reloaded",
    "body": "service:\n\tname: ${1:service_name}\n\tstate: reloaded",
    "description": "Reload a service"
  },
  "stopped": {
    "prefix": "stopped",
    "body": "service:\n\tname: ${1:service_name}\n\tstate: stopped",
    "description": "Stop a service"
  },
  "package": {
    "prefix": "package",
    "body": "package:\n\tname: ${1:package_name}",
    "description": "Install package"
  },
  "packages": {
    "prefix": "packages",
    "body": "package:\n\tname:\n\t\t- ${1:package_name}\n\t\t- ${2:package_name}",
    "description": "Install multiple packages"
  },
  "cmd": {
    "prefix": "cmd",
    "body": "command:\n\tcmd: ${1:command}",
    "description": "Execute command"
  },
  "cmd_argv": {
    "prefix": "cmd_argv",
    "body": "command:\n\targv:\n\t\t- ${1:command}\n\t\t- ${2:arg}",
    "description": "Execute command"
  },
  "cmd_stdin": {
    "prefix": "cmd_stdin",
    "body": "command:\n\tcmd: ${1:command}\n\tstdin: ${2:stdin}",
    "description": "Execute command with stdin"
  },
  "set_fact": {
    "prefix": "set_fact",
    "body": "set_fact:\n\t${1:var}: ${2:value}",
    "description": "Set host facts"
  },
  "role_defaults": {
    "prefix": "role_defaults",
    "body": "${1:name}_package: ${2:name}\n\n$1_service: ${3:$2}\n$1_manage_service: yes\n$1_started: yes\n\n$1_config: ${4:/etc/${5:$2/$2.conf}}\n$1_manage_config: ${6:no}\n$1_config_template: ${7:${8:$2.conf}.j2}",
    "description": "Role defaults"
  },
  "role_defaults_lookup": {
    "prefix": "role_defaults_lookup",
    "body": "${1:name}_package: \"{{ $1_lookup.package }}\"\n\n$1_service: \"{{ $1_lookup.service }}\"\n$1_manage_service: yes\n$1_started: yes\n\n$1_config: \"{{ $1_lookup.config }}\"\n$1_manage_config: ${2:no}\n$1_config_template: \"{{ $1_lookup.config_template }}\"",
    "description": "Role defaults from lookup"
  },
  "role_lookup": {
    "prefix": "role_lookup",
    "body": "${1:name}_map:\n\tdefaults:\n\t\tpackage: ${2:name}\n\t\tservice: ${3:$2}\n\t\tconfig: ${4:/etc/${5:$2/$2.conf}}\n\t\tconfig_template: ${6:${7:$2.conf}.j2}\n\t${8:os_family}: {}\n\n$1_lookup: \"{{ $1_map.defaults | combine(\n\t\t$1_map.$8[ansible_facts.$8]|default({})\n\t) }}\"",
    "description": "Map distributions"
  },
  "map_by": {
    "prefix": "map_by",
    "body": "${1:name}_map.${2:distribution}[ansible_facts.$2]|default({})",
    "description": "New level of merging for distribution mapping"
  },
  "var_lookup": {
    "prefix": "var_lookup",
    "body": "${1:name}_${2:variable}: \"{{ $1_lookup['$2'] }}\"",
    "description": "Lookup var in mapping"
  },
  "package_install": {
    "prefix": "package_install",
    "body": "- name: install ${1:name} package\n\tpackage:\n\t\tname: \"{{ ${2:$1}_package }}\"",
    "description": "Install package"
  },
  "service_manage": {
    "prefix": "service_manage",
    "body": "- name: manage ${1:name} service\n\tservice:\n\t\tname: \"{{ ${2:$1}_service }}\"\n\t\tenabled: \"{{ $2_started }}\"\n\t\tstate: \"{{ $2_started|bool | ternary('started', 'stopped') }}\"\n\twhen: $2_manage_service|bool",
    "description": "Manage service if variable is True"
  },
  "config_manage": {
    "prefix": "config_manage",
    "body": "- name: manage ${1:name} config\n\ttemplate:\n\t\tdest: \"{{ ${2:$1}_config }}\"\n\t\tsrc: \"{{ $2_config_template }}\"\n\t\towner: ${3:root}\n\t\tgroup: ${4:root}\n\t\tmode: ${5:0644}\n\tnotify: ${6:${7:reload} ${8:$1}}\n\twhen: $2_manage_config|bool",
    "description": "Manage config if variable is True"
  },
  "service_handler": {
    "prefix": "service_handler",
    "body": "- name: ${1:${2:reload} ${3:name}}\n\tservice:\n\t\tname: \"{{ ${4:$3}_service }}\"\n\t\tstate: ${5:$2ed}\n\twhen:\n\t\t- $3_manage_service|bool\n\t\t- $3_started|bool",
    "description": "Handler for service in role"
  }
}