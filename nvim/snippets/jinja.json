{
  "d": {
    "prefix": "d",
    "body": "${1:dict}['${2:key}']",
    "description": "Dict value"
  },
  "ife": {
    "prefix": "ife",
    "body": "${2:expression_if_true} if ${1:condition} else ${3:expression_if_false}",
    "description": "If expression"
  },
  "yaml_encode": {
    "prefix": "yaml_encode",
    "body": "yaml_encode",
    "description": "Serializes a single object into a YAML scalar"
  },
  "to_bool": {
    "prefix": "to_bool",
    "body": "to_bool",
    "description": "Returns the logical value of an element"
  },
  "exactly_one_true": {
    "prefix": "exactly_one_true",
    "body": "exactly_one_true",
    "description": "Tests that exactly one item in an iterable is truthy (neither None, False, nor 0)"
  },
  "exactly_n_true": {
    "prefix": "exactly_n_true",
    "body": "exactly_n_true(${1:2})",
    "description": "Tests that exactly N items in an iterable are truthy (neither None, False, nor 0)"
  },
  "quote": {
    "prefix": "quote",
    "body": "quote",
    "description": "Quote for shell usage"
  },
  "regex_search": {
    "prefix": "regex_search",
    "body": "regex_search(${1:'${2:regex}'}${3:${4:, ignorecase=True}${5:, multiline=True}})",
    "description": "Search in a string and return match object"
  },
  "regex_match": {
    "prefix": "regex_match",
    "body": "regex_match(${1:'${2:regex}'}${3:${4:, ignorecase=True}${5:, multiline=True}})",
    "description": "Search at the beginning of a string and return match object"
  },
  "regex_replace": {
    "prefix": "regex_replace",
    "body": "regex_replace(${1:'${2:regex}'}, ${3:'${4:replacement}'}${5:, ignorecase=True}${6:, multiline=True})",
    "description": "Replace text in a string with regex"
  },
  "regex_escape": {
    "prefix": "regex_escape",
    "body": "regex_escape(${1/.+/'/}${1:posix_basic}${1/.+/'/})",
    "description": "Escape special characters within a regex"
  },
  "match": {
    "prefix": "match",
    "body": "match(${1:'${2:regex}'}${3:${4:, ignorecase=True}${5:, multiline=True}})",
    "description": "Tests that a string matches the regex"
  },
  "uuid": {
    "prefix": "uuid",
    "body": "uuid",
    "description": "Return a UUID"
  },
  "is_list": {
    "prefix": "is_list",
    "body": "is_list",
    "description": "Return if an object is list"
  },
  "is_iter": {
    "prefix": "is_iter",
    "body": "is_iter",
    "description": "Return if an object is iterable"
  },
  "avg": {
    "prefix": "avg",
    "body": "avg",
    "description": "Returns the average value of the elements of a list"
  },
  "union": {
    "prefix": "union",
    "body": "union(${1:[${2:item1}]})",
    "description": "Return the union of two lists"
  },
  "intersect": {
    "prefix": "intersect",
    "body": "intersect(${1:[${2:item1}]})",
    "description": "Return the intersection of two lists"
  },
  "difference": {
    "prefix": "difference",
    "body": "difference(${1:[${2:item1}]})",
    "description": "Return the difference of two lists"
  },
  "symmetric_difference": {
    "prefix": "symmetric_difference",
    "body": "symmetric_difference(${1:[${2:item1}]})",
    "description": "Return the symmetric difference of two lists"
  },
  "is_sorted": {
    "prefix": "is_sorted",
    "body": "is_sorted",
    "description": "Return True if an iterable object is already sorted"
  },
  "compare_lists": {
    "prefix": "compare_lists",
    "body": "compare_lists(${1:[${2:item1}]})",
    "description": "Compare two lists and return a dictionary with the changes"
  },
  "compare_dicts": {
    "prefix": "compare_dicts",
    "body": "compare_dicts(${1:\\{${2:'${3:key}': ${4:value}}\\}})",
    "description": "Compare two dictionaries and return a dictionary with the changes"
  },
  "contains_whitespace": {
    "prefix": "contains_whitespace",
    "body": "contains_whitespace",
    "description": "Return True if a text contains whitespaces"
  },
  "substring_in_list": {
    "prefix": "substring_in_list",
    "body": "substring_in_list",
    "description": "Return True if a substring is found in a list of string values"
  },
  "check_whitelist_blacklist": {
    "prefix": "check_whitelist_blacklist",
    "body": "check_whitelist_blacklist(${1:white}list=${2:[${3:item1}]}${4:, blacklist=${5:[${6:item1}]}})",
    "description": "Check a whitelist and/or blacklist to see if the value matches it"
  },
  "date_format": {
    "prefix": "date_format",
    "body": "date_format(${1:'d.%m.%Y %H:%M'})",
    "description": "Converts unix timestamp into human-readable string"
  },
  "to_num": {
    "prefix": "to_num",
    "body": "to_num",
    "description": "Converts a string to its numerical value"
  },
  "yaml": {
    "prefix": "yaml",
    "body": "yaml${1:(flow_style=False)}",
    "description": "Render a data structure as yaml"
  },
  "json": {
    "prefix": "json",
    "body": "json${1:(${2:sort_keys=False}${3:${2/.+/, /}indent=${4:2}})}",
    "description": "Render a data structure as json"
  },
  "load_yaml": {
    "prefix": "load_yaml",
    "body": "load_yaml",
    "description": "Load yaml from string"
  },
  "load_json": {
    "prefix": "load_json",
    "body": "load_json",
    "description": "Load json from string"
  },
  "load_text": {
    "prefix": "load_text",
    "body": "{%${1:-} load_text as ${2:variable} -%}\n$3\n{%${1} endload %}",
    "description": "Load text to variable"
  },
  "import_yaml": {
    "prefix": "import_yaml",
    "body": "{%${1:-} import_yaml '${2:${3:defaults}.yaml}' as ${4:$3} %}",
    "description": "Import yaml from file"
  },
  "import_json": {
    "prefix": "import_json",
    "body": "{%${1:-} import_json '${2:${3:defaults}.json}' as ${4:$3} %}",
    "description": "Import json from file"
  },
  "import_text": {
    "prefix": "import_text",
    "body": "{%${1:-} import_text '${2:${3:}.txt}' as ${4:$3} %}",
    "description": "Import text from file"
  },
  "random_hash": {
    "prefix": "random_hash",
    "body": "random_hash('${1:sha512}')",
    "description": "Generates a random number between 1 and the number passed to the filter, and then hashes it"
  },
  "set_dict_key_value": {
    "prefix": "set_dict_key_value",
    "body": "set_dict_key_value('${1:foo:bar}', ${2:${3:42}, delimiter='${4:.}'})",
    "description": "Set a value in a nested dictionary"
  },
  "append_dict_key_value": {
    "prefix": "append_dict_key_value",
    "body": "append_dict_key_value('${1:foo:bar}', ${2:${3:42}, delimiter='${4:.}'})",
    "description": "Append to a list nested (deep) in a dictionary"
  },
  "extend_dict_key_value": {
    "prefix": "extend_dict_key_value",
    "body": "extend_dict_key_value('${1:foo:bar}', ${2:${3:42}, delimiter='${4:.}'})",
    "description": "Extend a list nested (deep) in a dictionary"
  },
  "update_dict_key_value": {
    "prefix": "update_dict_key_value",
    "body": "update_dict_key_value('${1:foo:bar}', ${2:${3:dict}, delimiter='${4:.}'})",
    "description": "Update a dictionary nested (deep) in another dictionary"
  },
  "base64_encode": {
    "prefix": "base64_encode",
    "body": "base64_encode",
    "description": "Encode a string as base64"
  },
  "base64_decode": {
    "prefix": "base64_decode",
    "body": "base64_decode",
    "description": "Decode a base64-encoded string"
  },
  "http_query": {
    "prefix": "http_query",
    "body": "http_query(${1:many_supported_parameterss})",
    "description": "Return the HTTP reply object from a URL"
  },
  "traverse": {
    "prefix": "traverse",
    "body": "traverse('${1:foo:bar}', ${2:${3:default}, delimiter='${4:.}'})",
    "description": "Traverse a dict or list using a colon-delimited target string"
  },
  "json_query": {
    "prefix": "json_query",
    "body": "json_query(${1:'${2:[]}'})",
    "description": "Make queries against JSON data using JMESPath language"
  },
  "to_snake_case": {
    "prefix": "to_snake_case",
    "body": "to_snake_case",
    "description": "Converts a string from camelCase (or CamelCase) to snake_case"
  },
  "to_camelcase": {
    "prefix": "to_camelcase",
    "body": "to_camelcase${1:(uppercamel=True)}",
    "description": "Converts a string from snake_case to camelCase (or UpperCamelCase)"
  },
  "is_ip": {
    "prefix": "is_ip",
    "body": "is_ip${1:(options='${2:global}')}",
    "description": "Return if a string is a valid IP Address"
  },
  "is_ipv4": {
    "prefix": "is_ipv4",
    "body": "is_ipv4${1:(options='${2:global}')}",
    "description": "Returns if a string is a valid IPv4 address"
  },
  "is_ipv6": {
    "prefix": "is_ipv6",
    "body": "is_ipv6${1:(options='${2:global}')}",
    "description": "Returns if a string is a valid IPv6 address"
  },
  "ipaddr": {
    "prefix": "ipaddr",
    "body": "ipaddr${1:(options='${2:global}')}",
    "description": "From a list, returns only valid IP entries"
  },
  "ipv4": {
    "prefix": "ipv4",
    "body": "ipv4${1:(options='${2:global}')}",
    "description": "From a list, returns only valid IPv4 entries"
  },
  "ipv6": {
    "prefix": "ipv6",
    "body": "ipv6${1:(options='${2:global}')}",
    "description": "From a list, returns only valid IPv6 entries"
  },
  "network_hosts": {
    "prefix": "network_hosts",
    "body": "network_hosts${1:(options='${2:global}')}",
    "description": "Return the list of hosts within a networks"
  },
  "network_size": {
    "prefix": "network_size",
    "body": "network_size${1:(options='${2:global}')}",
    "description": "Return the size of the network"
  },
  "gen_mac": {
    "prefix": "gen_mac",
    "body": "gen_mac",
    "description": "Generates a MAC address with the defined OUI prefix"
  },
  "dns_check": {
    "prefix": "dns_check",
    "body": "dns_check(${1:port=${2:443}})",
    "description": "Return the ip resolved by dns.Tries to connect to the address before considering it useful"
  },
  "is_text_file": {
    "prefix": "is_text_file",
    "body": "is_text_file",
    "description": "Return if a file is text"
  },
  "is_binary_file": {
    "prefix": "is_binary_file",
    "body": "is_binary_file",
    "description": "Return if a file is binary"
  },
  "is_empty_file": {
    "prefix": "is_empty_file",
    "body": "is_empty_file",
    "description": "Return if a file is empty"
  },
  "file_hashsum": {
    "prefix": "file_hashsum",
    "body": "file_hashsum${1:('${2:sha512}')}",
    "description": "Return the hashsum of a file"
  },
  "list_files": {
    "prefix": "list_files",
    "body": "list_files",
    "description": "Return a recursive list of files under a specific path"
  },
  "path_join": {
    "prefix": "path_join",
    "body": "path_join(${1:path})",
    "description": "Joins absolute paths"
  },
  "which": {
    "prefix": "which",
    "body": "which",
    "description": "Python clone of /usr/bin/which"
  },
  "show_full_context": {
    "prefix": "show_full_context",
    "body": "show_full_context()",
    "description": "Output all variables present in the current Jinja context"
  },
  "raise": {
    "prefix": "raise",
    "body": "raise('${1:Custom Error}')",
    "description": "Raise error from jinja"
  }
}
