local i = require("luasnip.nodes.insertNode").I
local jinja_filter_snippets = require("snippets.jinja_utils").jinja_filter_snippets

-- Jinja tests
return jinja_filter_snippets({
  boolean = { dscr = "Return true if the object is a boolean value" },
  callable = { dscr = "Return whether the object is callable" },
  defined = { dscr = "Return true if the variable is defined" },
  divisibleby = { dscr = "Check if a variable is divisible by a number", nodes = i(1, "num") },
  eq = { dscr = "Same as `a == b`", nodes = true },
  equalto = { dscr = "Same as `a == b`", nodes = true },
  escaped = { dscr = "Check if the value is escaped" },
  even = { dscr = "Return true if the variable is even" },
  ["false"] = { dscr = "Return true if the object is `false`" },
  filter = { dscr = "Check if a filter exists by name" },
  float = { dscr = "Return true if the object is a float" },
  ge = { dscr = "Same as `a >= b`", nodes = true },
  gt = { dscr = "Same as `a > b`", nodes = true },
  greaterthan = { dscr = "Same as `a > b`", nodes = true },
  ["in"] = { dscr = "Check if value is in sequence", nodes = true },
  integer = { dscr = "Return true if the object is an integer" },
  iterable = { dscr = "Check if itâ€™s possible to iterate over an object" },
  le = { dscr = "Same as `a <= b`", nodes = true },
  lower = { dscr = "Return true if the variable is lowercased" },
  lt = { dscr = "Same as `a < b`", nodes = true },
  lessthan = { dscr = "Same as `a < b`", nodes = true },
  mapping = { dscr = "Return true if the object is a mapping (dict etc.)" },
  ne = { dscr = "Same as `a != b`" },
  none = { dscr = "Return true if the variable is `none`" },
  number = { dscr = "Return true if the variable is a number" },
  odd = { dscr = "Return true if the variable is odd" },
  sameas = {
    dscr = "Check if an object points to the same memory address than another object",
    nodes = true,
  },
  sequence = { dscr = "Return true if the variable is a sequence" },
  string = { dscr = "Return true if the object is a string" },
  test = { dscr = "Check if a test exists by name" },
  ["true"] = { dscr = "Return true if the object is `true`" },
  undefined = { dscr = "Like `defined()` but the other way round" },
  upper = { dscr = "Return true if the variable is uppercased" },
})
