{
  "exclude": {
    "prefix": "exclude",
    "body": "exclude:\n\t- ${1:sls}: ${2:name}",
    "description": "The exclude statement"
  },
  "extend": {
    "prefix": "extend",
    "body": "extend:\n\t${1:id_to_extend}:\n\t\t${2:module_name}:\n\t\t\t- ${3:key}: ",
    "description": "The extend statement"
  },
  "require": {
    "prefix": "require",
    "body": "require:\n\t\t- ${1:${2:file}: ${3:state_id}}",
    "description": "Demands that the required state executes before"
  },
  "require_any": {
    "prefix": "require_any",
    "body": "require_any:\n\t\t- ${1:${2:file}: ${3:state_id}}\n\t\t- ${4:${5:file}: ${6:state_id}}",
    "description": "Demands that one of the required states executes before the dependent state"
  },
  "require_in": {
    "prefix": "require_in",
    "body": "require_in:\n\t\t- ${1:${2:file}: ${3:state_id}}",
    "description": "Demands that the required state executes before"
  },
  "watch": {
    "prefix": "watch",
    "body": "watch:\n\t\t- ${1:${2:file}: ${3:state_id}}",
    "description": "Add additional behavior when there are changes"
  },
  "watch_any": {
    "prefix": "watch_any",
    "body": "watch_any:\n\t\t- ${1:${2:file}: ${3:state_id}}\n\t\t- ${4:${5:file}: ${6:state_id}}",
    "description": "Add additional behavior when there are changes in any states"
  },
  "watch_in": {
    "prefix": "watch_in",
    "body": "watch_in:\n\t\t- ${1:${2:service}: ${3:state_id}}",
    "description": "Add additional behavior when there are changes"
  },
  "prereq": {
    "prefix": "prereq",
    "body": "prereq:\n\t\t- ${1:${2:file}: ${3:state_id}}",
    "description": "Actions to be taken based on the expected results of a state that has not yet been executed"
  },
  "prereq_in": {
    "prefix": "prereq_in",
    "body": "prereq_in:\n\t\t- ${1:${2:file}: ${3:state_id}}",
    "description": "Actions to be taken based on the expected results of a state that has not yet been executed"
  },
  "use": {
    "prefix": "use",
    "body": "use:\n\t\t- ${1:${2:file}: ${3:state_id}}",
    "description": "Inherit the arguments passed in another id declaration"
  },
  "use_in": {
    "prefix": "use_in",
    "body": "use_in:\n\t\t- ${1:${2:file}: ${3:state_id}}",
    "description": "Inherit the arguments passed in another id declaration"
  },
  "onchanges": {
    "prefix": "onchanges",
    "body": "onchanges:\n\t\t- ${1:${2:file}: ${3:state_id}}",
    "description": "Makes a state only apply if the required states generate changes"
  },
  "onchanges_any": {
    "prefix": "onchanges_any",
    "body": "onchanges_any:\n\t\t- ${1:${2:file}: ${3:state_id}}\n\t\t- ${4:${5:file}: ${6:state_id}}",
    "description": "Makes a state only apply if one of the required states generates changes"
  },
  "onchanges_in": {
    "prefix": "onchanges_in",
    "body": "onchanges_in:\n\t\t- ${1:${2:service}: ${3:state_id}}",
    "description": "Makes a state only apply if the required states generate changes"
  },
  "onfail": {
    "prefix": "onfail",
    "body": "onfail:\n\t\t- ${1:${2:service}: ${3:state_id}}",
    "description": "Make a state only apply as a response to the failure of another state"
  },
  "onfail_any": {
    "prefix": "onfail_any",
    "body": "onfail_any:\n\t\t- ${1:${2:service}: ${3:state_id}}",
    "description": "Make a state only apply as a response to the failure of at least one other state"
  },
  "onfail_in": {
    "prefix": "onfail_in",
    "body": "onfail_in:\n\t\t- ${1:${2:service}: ${3:state_id}}",
    "description": "Make a state only apply as a response to the failure of another state"
  },
  "runas": {
    "prefix": "runas",
    "body": "runas: ${1:user}",
    "description": "Set the user which will be used to run the command"
  },
  "fire_event": {
    "prefix": "fire_event",
    "body": "fire_event: ${1:True}",
    "description": "Send an event to the Salt Master upon completion of that individual state"
  },
  "reload_modules": {
    "prefix": "reload_modules",
    "body": "reload_modules: True",
    "description": "Reload modules"
  },
  "reload_grains": {
    "prefix": "reload_grains",
    "body": "reload_grains: True",
    "description": "Reload Grains"
  },
  "reload_pillar": {
    "prefix": "reload_pillar",
    "body": "reload_pillar: True",
    "description": "Reload Pillar"
  },
  "unless": {
    "prefix": "unless",
    "body": "unless:\n\t\t- ${1:fun: ${2:file.file_exists}}",
    "description": "State should only run when any of the specified commands return False"
  },
  "onlyif": {
    "prefix": "onlyif",
    "body": "onlyif:\n\t\t- ${1:fun: ${2:file.file_exists}}",
    "description": "If each command listed in onlyif returns True, then the state is run"
  },
  "check_cmd": {
    "prefix": "check_cmd",
    "body": "check_cmd:\n\t\t- ${1:cmd}",
    "description": "Determine that a state did or did not run as expected"
  },
  "retry": {
    "prefix": "retry",
    "body": "retry:\n\t\tattempts: ${1:5}\n\t\tinterval: ${2:30}\n\t\tsplay: ${3:10}",
    "description": "Execute a state multiple times until a desired result is obtained"
  },
  "backup": {
    "prefix": "backup",
    "body": "backup: minion",
    "description": "Backing up files that are replaced by the file.managed and file.recurse states"
  },
  "import_map": {
    "prefix": "import_map",
    "body": "{#- Get the `tplroot` from `tpldir` #}\n{%- set tplroot = tpldir.split('/')[0] %}\n{%- from tplroot ~ \"/map.jinja\" import ${1:name} with context %}",
    "description": "Import from map.jinja"
  },
  "tplroot": {
    "prefix": "tplroot",
    "body": "{#- Get the `tplroot` from `tpldir` #}\n{%- set tplroot = tpldir.split('/')[0] %}",
    "description": "Get the tplroot from tpldir"
  },
  "import_files_switch": {
    "prefix": "import_files_switch",
    "body": "{%- from tplroot ~ \"/libtofs.jinja\" import files_switch with context %}",
    "description": "Import files_switch"
  },
  "files_switch": {
    "prefix": "files_switch",
    "body": "{{ files_switch(['${1:${2:name}.conf}'], lookup='${2:name}-config-file-managed') }}",
    "description": "source: files_switch"
  },
  "test.nop": {
    "prefix": "test.nop",
    "body": "test.nop: []",
    "description": "A no-op state that does nothing"
  },
  "file.replace": {
    "prefix": "file.replace",
    "body": "file.replace:\n\t- name: ${1:/path/to/file}\n\t- pattern: ${2:match_regexp}\n\t- repl: ${3:replacement_text}",
    "description": "Maintain an edit in a file"
  },
  "service.running": {
    "prefix": "service.running",
    "body": "service.running:\n\t- name: ${1:service_name}\n\t- enable: ${2:true}\n\t- reload: ${3:true}",
    "description": "Ensure that the service is running"
  },
  "file.managed": {
    "prefix": "file.managed",
    "body": "file.managed:\n\t- name: ${1:/path/to/file}\n\t- source: ${2:salt://${3:name}/files/${4:config}}\n\t- user: ${5:root}\n\t- group: ${6:root}\n\t- mode: ${7:644}\n\t- makedirs: ${8:true}\n\t- template: ${9:jinja}\n\t- context:\n\t\t\t$3: {{ $3 | yaml }}",
    "description": "Manage a given file"
  },
  "file.serialize": {
    "prefix": "file.serialize",
    "body": "file.serialize:\n\t- name: ${1:file_path}\n\t- dataset: ${2:{{ ${3:data} | yaml }}}\n\t- formatter: ${4:configparser}\n\t- user: ${5:root}\n\t- group: ${6:root}\n\t- mode: ${7:644}\n\t- makedirs: ${8:true}",
    "description": "Serializes dataset and store it into managed file"
  },
  "pkg.installed": {
    "prefix": "pkg.installed",
    "body": "pkg.installed:\n\t- name: ${1:package_name}",
    "description": "Ensure that the package is installed"
  },
  "pkg.installed.pkgs": {
    "prefix": "pkg.installed.pkgs",
    "body": "pkg.installed:\n\t- pkgs:$1",
    "description": "Ensure that multiple packages are installed"
  },
  "pkg.removed": {
    "prefix": "pkg.removed",
    "body": "pkg.removed:\n\t- name: ${1:package_name}",
    "description": "Verify that a package is not installed"
  },
  "pkg.removed.pkg": {
    "prefix": "pkg.removed.pkg",
    "body": "pkg.removed:\n\t- pkgs:$1",
    "description": "Verify that list of packages is removed"
  },
  "pkg.purged": {
    "prefix": "pkg.purged",
    "body": "pkg.purged:\n\t- name: ${1:package_name}",
    "description": "Verify that a package is purged"
  },
  "pkg.purged.pkg": {
    "prefix": "pkg.purged.pkg",
    "body": "pkg.purged:\n\t- pkgs:$1",
    "description": "Verify that list of packages is purged"
  }
}
