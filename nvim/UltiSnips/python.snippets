# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet #! "Shebang" b
#!/usr/bin/env python${1:3}

endsnippet

snippet cutf8 "# encoding: UTF-8" r
# -*- coding: utf-8 -*-

endsnippet

snippet imp "Import module" b
import ${0:module}
endsnippet

snippet from "From package import" b
from ${1:package} import ${0:module}
endsnippet

snippet ifm "If __main__" b
if __name__ == '__main__':
	${0:${VISUAL}}
endsnippet

snippet for "For loop statement" b
for ${1:item} in ${2:items}:
	${3:${VISUAL}}
endsnippet

snippet wh "While loop statement" b
while ${1:condition}:
	${2:${VISUAL}}
endsnippet

snippet dowh "Same as do...while in other languages" b
while True:
	${2:${VISUAL}}
	if ${1:condition}:
		break
endsnippet

snippet with "With statement" b
with ${1:expr} as ${2:var}:
	${3:${VISUAL}}
endsnippet

snippet if "If" b
if ${1:condition}:
	${2:${VISUAL}}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
	${2:${VISUAL}}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else" b
if ${1:condition}:
	${2:${VISUAL}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet

snippet el "Else statement" b
else:
	${1:${VISUAL}}
endsnippet

snippet elif "Elif" b
elif ${1:condition}:
	${2:${VISUAL}}
endsnippet

snippet try "Try / Except" b
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet trye "Try / Except / Else" b
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "Try / Except / Finally" b
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally" b
try:
	${1:${VISUAL}}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

snippet exc "Except statement" b
except ${1:Exception} as ${2:e}:
	${3:raise $2}
endsnippet

snippet fin "Finally statement" b
finally:
	${1:pass}
endsnippet

snippet cl "Class definition" b
class ${1:ClassName}${2:(${3:object})}:
	'''${4:docstring for $1}'''
	${5:${VISUAL}}
endsnippet

snippet cli "Class definition with __init__" b
class ${1:ClassName}${2:(${3:object})}:
	'''${4:docstring for $1}'''

	def __init__(self${5:, ${6:args}})${7: -> None}:
		${8:${VISUAL}}
endsnippet

snippet def "Function definition" b
def ${1:function}(`!p snip.rv = 'self${2:, ${3:args}}' if snip.indent else '${2:args}'`)${4: -> ${5:None}}:
	'''${6:docstring for $1}'''
	${7:${VISUAL}}
endsnippet

snippet defi "Class __init__ definition" b
def __init__(self${1:, ${2:args}})${3: -> None}:
	${4:${VISUAL}}
endsnippet

snippet ret "Return" b
return $1
endsnippet

snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet

snippet sa "self.attribute = attribute" b
self.${1:attribute} = $1
endsnippet

snippet _ "__magic__" w
__${1:init}__
endsnippet

snippet lambd "Lambda"
lambda ${1:vars} : ${2:action}
endsnippet

snippet lcp "List comprehension"
[${5:expression} for ${1:item} in ${2:items}${3: if ${4:condition}}]
endsnippet

snippet dcp "Dict comprehension"
{${5:key_exprn}: ${6:value_expr} for ${1:item} in ${2:items}${3: if ${4:condition}}}
endsnippet

snippet scp "Set comprehension"
{${5:expression} for ${1:item} in ${2:items}${3: if ${4:condition}}}
endsnippet

snippet lgen "Generator Expression"
(${5:expression} for ${1:item} in ${2:items}${3: if ${4:condition}})
endsnippet

snippet ar "*args"
*args
endsnippet

snippet kw "**kwargs"
**kwargs
endsnippet

snippet akw "*args, **kwargs"
*args, **kwargs
endsnippet

snippet kwg "kwargs.get()"
kwargs.get('$1', ${2:None})
endsnippet

snippet v "Variable annotation" w
${1:variable}: ${2:type}
endsnippet

snippet va "Variable annotation with assignment" w
${1:variable}: ${2:type} = ${3:value}
endsnippet

snippet reveal_type "Mypy: reveal type" b
reveal_type(${1:variable})
endsnippet
