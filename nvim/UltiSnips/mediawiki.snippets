# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet i "Italic text" w
''${1:${VISUAL}}''
endsnippet

snippet b "Bold text" w
'''${1:${VISUAL}}'''
endsnippet

snippet bi "Bold and italic text" w
'''''${1:${VISUAL}}'''''
endsnippet

snippet nowiki "Escape wiki markup" w
<nowiki>${1:${VISUAL}}</nowiki>
endsnippet

snippet h2 "Heading level 2" b
== ${1:${VISUAL}} ==

endsnippet

snippet h3 "Heading level 3" b
=== ${1:${VISUAL}} ===

endsnippet

snippet h4 "Heading level 4" b
==== ${1:${VISUAL}} ====

endsnippet

snippet h5 "Heading level 5" b
===== ${1:${VISUAL}} =====

endsnippet

snippet h6 "Heading level 6" b
====== ${1:${VISUAL}} ======

endsnippet

snippet hl "Horizontal rule" b
----

endsnippet

snippet preformatted "Preformatted text" b
${VISUAL/^/ /gm}
endsnippet

snippet u "Underlined text" w
<u>${1:${VISUAL}}</u>
endsnippet

snippet ins "Inserted text" w
<ins>${1:${VISUAL}}</ins>
endsnippet

snippet s "Struck-through text" w
<s>${1:${VISUAL}}</s>
endsnippet

snippet del "Deleted text" w
<del>${1:${VISUAL}}</del>
endsnippet

snippet code "Source code" w
<code>${1:${VISUAL}}</code>
endsnippet

snippet blockquote "Blockquote" w
<blockquote>${1:${VISUAL}}</blockquote>
endsnippet

snippet q "Quotes" w
<q>${1:${VISUAL}}</q>
endsnippet

snippet pre "Preformatted text" w
<pre>
${1:${VISUAL}}
</pre>
endsnippet

snippet br "Line break" w
<br />
endsnippet

snippet nbs "Non-breaking space" i
&nbsp;
endsnippet

snippet abbr "Abbreviation" w
<abbr title="${2:meaning}">${1:${VISUAL}}</abbr>
endsnippet

snippet kbd "Keyboard input" w
<kbd>${1:${VISUAL}}</kbd>
endsnippet

snippet var "Variable name" w
<var>${1:${VISUAL}}</var>
endsnippet

snippet samp "Sample output" w
<samp>${1:${VISUAL}}</samp>
endsnippet

snippet strong "Important text" w
<strong>${1:${VISUAL}}</strong>
endsnippet

snippet em "Emphasized text" w
<em>${1:${VISUAL}}</em>
endsnippet

snippet syn "Syntax Highlight" w
<syntaxhighlight lang="${1:text}">
${2:${VISUAL}}
</syntaxhighlight>
endsnippet

snippet syni "Inline Syntax Highlight" w
<syntaxhighlight lang="${1:text}" inline="1">${2:${VISUAL}}</syntaxhighlight>
endsnippet

snippet a "Internal link" w
[[${1:${2:${3:page}#${4:section}}|${5:${VISUAL}}}]]
endsnippet

snippet ae "External link" w
[${1:${2:url} ${3:${VISUAL}}}]
endsnippet

snippet redirect "Redirect" b
#REDIRECT [[${1:${2:page}#${3:section}}]]
endsnippet

snippet category "Category" b
[[Category:${1:Name}]]
endsnippet

# Empty table
snippet t "Table" b
{| class="wikitable"
$0
|}
endsnippet

# Table caption
snippet tc "Table caption" b
|+ $0
endsnippet

# Table headers or table rows with number of cells
snippet t([rh])(m?)(\d*) "Table rows or headers" br
|-
`!p num = match.group(3) or 0
sep = '|' if match.group(1) == 'r' else '!'
sep2 = '\n' if match.group(2) else sep
placeholders = ['${{{}:text{}}}'.format(i, i) for i in range(1, int(num)+1)]
snip.rv = sep+' ' + ' {}{} '.format(sep2, sep).join(placeholders)`
endsnippet

# Cell attributes
snippet cs "Column span" w
colspan="${1:2}"|
endsnippet

snippet rs "Row span" w
rowspan="${1:2}"|
endsnippet
