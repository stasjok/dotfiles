# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# Jinja
extends jinja2

# Core
snippet /^(\s*)- ?n(a|am|ame|ame:)?/ "Task name" r
`!p snip.rv = match.group(1)`- name: ${VISUAL}
endsnippet

snippet /^- ?h(o|os|ost|osts|osts:)?/ "Hosts" r
- hosts: ${VISUAL}
endsnippet

snippet pre_tasks "A list of tasks to execute before roles" b
pre_tasks:
	- ${1:name: ${2:task name}}
endsnippet

snippet roles "List of roles to be imported into the play" b
roles:
	- ${1:role_name}
endsnippet

snippet tasks "Main list of tasks to execute in the play" b
tasks:
	- ${1:name: ${2:task name}}
endsnippet

snippet post_tasks "A list of tasks to execute after the tasks section" b
post_tasks:
	- ${1:name: ${2:task name}}
endsnippet

snippet role "Role with vars"
role: ${1:role_name}
	vars:
		${2:key}: ${3:value}
endsnippet

snippet state "Task state" b
state: ${1:absent}
endsnippet

# Loops
snippet loop "Loop over list" b
loop:
	- ${1:item1}
endsnippet

snippet loopv "Loop over variable" b
loop: "{{ ${1:variable} }}"
endsnippet

snippet loop_control "Loop control" b
loop_control:
	loop_var: ${1:item}
	label: "{{ ${2:${1}.${3:name}} }}"
endsnippet

# Variables
snippet v "Variable"
"{{ ${1:item} }}"
endsnippet

snippet vd "Variable with default"
"{{ ${1:var_name} | default(${2:omit}) }}"
endsnippet

# Keywords
snippet vars "Dictionary/map of variables" b
vars:
	${1:var_name}: ${2:"\{\{ ${3:other_var} \}\}"}
endsnippet

snippet vars_files "List of files that contain vars to include in the play" b
vars_files:
	- ${1:var_file}
endsnippet

snippet become "Privilege escalation" b
become: ${1:yes}
endsnippet

snippet become_user "User that you 'become' after using privilege escalation" b
become_user: ${1:root}
endsnippet

snippet become_method "Which method of privilege escalation to use" b
become_method: ${1:su}
endsnippet

snippet check_mode "A boolean that controls if a task is executed in 'check' mode" b
check_mode: ${1:no}
endsnippet

snippet ignore_errors "Ignore task failures and continue with play" b
ignore_errors: ${1:yes}
endsnippet

snippet no_log "Information disclosure" b
no_log: ${1:yes}
endsnippet

snippet env "Setting the Environment" b
environment:
	${1:ENV_VAR}: ${2:value}
endsnippet

snippet run_once "Force the task to attempt to execute on the first host available" b
run_once: ${1:yes}
endsnippet

snippet tags "Tags applied to the task" b
tags:
	- ${1:always}
endsnippet

snippet delegate_to "Host to execute task instead of the target" b
delegate_to: ${1:127.0.0.1}
endsnippet

snippet register "Name of variable that will contain task status" b
register: ${1:var_name}
endsnippet

snippet when "Conditional expression" b
when: ${1:condition}
endsnippet

snippet notify "List of handlers to notify" b
notify: ${1:handler_name}
endsnippet

snippet listen "Listen to generic topics" b
listen: ${1:handler_name}
endsnippet

snippet dependencies "Role dependencies" b
dependencies:
	- ${1:role_name}
endsnippet

# Task snippets

# File snippets
snippet file "Change file or directory permissions" b
file:
	path: ${1:/path/to}
	owner: ${2:root}
	group: ${3:root}
	mode: ${4:0644}
endsnippet

snippet dir "Create a directory" b
file:
	path: ${1:/path/to/directory}
	owner: ${2:root}
	group: ${3:root}
	mode: ${4:0755}
	state: directory
endsnippet

snippet link "Create a symbolic link" b
file:
	path: ${1:/path/to/symlink}
	src: ${2:/link/target}
	owner: ${3:root}
	group: ${4:root}
	state: link
endsnippet

snippet hard "Create a hard link" b
file:
	path: ${1:/path/to/hardlink}
	src: ${2:/link/target}
	owner: ${3:root}
	group: ${4:root}
	mode: ${5:0644}
	state: hard
endsnippet

snippet stat "Get file or directory information" b
file:
	path: ${1:/path/to}
endsnippet

snippet absent "Delete file or directory" b
file:
	path: ${1:/path/to}
	state: absent
endsnippet

snippet copy "Copy a file to a remote server" b
copy:
	dest: ${1:/dest/file}
	src: ${2:${1/.*\///}}
	owner: ${3:root}
	group: ${4:root}
	mode: ${5:0644}
endsnippet

snippet content "Set the contents of a file" b
copy:
	dest: ${1:/dest/file}
	content: ${2:"\{\{ ${3:variable} \}\}"}
	owner: ${4:root}
	group: ${5:root}
	mode: ${6:0644}
endsnippet

snippet validate "The validation command to run before copying into place" b
validate: ${1:${2:command} %s}
endsnippet

snippet template "Template a file out to a remote server" b
template:
	dest: ${1:/dest/file}
	src: ${2:${1/.*\///}.j2}
	owner: ${3:root}
	group: ${4:root}
	mode: ${5:0644}
endsnippet

snippet trim_blocks "Trim newlines after Jinja blocks" b
trim_blocks: ${1:no}
endsnippet

snippet lstrip_blocks "Strip leading whitespaces for Jinja blocks" b
lstrip_blocks: ${1:yes}
endsnippet

snippet trim "Jinja whitespace control" b
trim_blocks: ${1:yes}
lstrip_blocks: ${1:yes}
endsnippet

snippet line "Manage line in text file" b
lineinfile:
	path: ${1:/dest/file}
	line: ${2:line}
endsnippet

snippet lineregexp "Manage line in text file" b
lineinfile:
	path: ${1:/dest/file}
	line: ${2:line}
	regexp: ${3:regexp}
endsnippet

snippet lineafter "Manage line in text file" b
lineinfile:
	path: ${1:/dest/file}
	line: ${2:line}
	insertafter: ${3:EOF}
endsnippet

snippet linebefore "Manage line in text file" b
lineinfile:
	path: ${1:/dest/file}
	line: ${2:line}
	insertbefore: ${3:BOF}
endsnippet

snippet linecreate "Manage line in text file" b
lineinfile:
	path: ${1:/dest/file}
	line: ${2:line}
	create: yes
	owner: ${3:root}
	group: ${4:root}
	mode: ${5:0644}
endsnippet

snippet linereplace "Replace line with backrefs in text file" b
lineinfile:
	path: ${1:/dest/file}
	regexp: ${2:regexp}
	line: ${3:replacement}
	backrefs: ${4:yes}
endsnippet

snippet linedelete "Delete line in text file" b
lineinfile:
	path: ${1:/dest/file}
	${2:regexp}: ${3:line}
	state: absent
endsnippet

# Service snippets
snippet service "Manage services" b
service:
	name: ${1:service_name}
	enabled: ${2:yes}
	state: ${3:started}
endsnippet

snippet restarted "Restart a service" b
service:
	name: ${1:service_name}
	state: restarted
endsnippet

snippet reloaded "Reload a service" b
service:
	name: ${1:service_name}
	state: reloaded
endsnippet

snippet stopped "Stop a service" b
service:
	name: ${1:service_name}
	state: stopped
endsnippet

# Package snippets
snippet package "Install package" b
package:
	name: ${1:package_name}
endsnippet

snippet packages "Install multiple packages" b
package:
	name:
		- ${1:package_name}
		- ${2:package_name}
endsnippet

# Commands
snippet cmd "Execute command" b
command:
	cmd: ${1:command}
endsnippet

snippet cmd_argv "Execute command" b
command:
	argv:
		- ${1:command}
		- ${2:arg}
endsnippet

snippet cmd_stdin "Execute command with stdin" b
command:
	cmd: ${1:command}
	stdin: ${2:stdin}
endsnippet

# Vars
snippet set_fact "Set host facts" b
set_fact:
	${1:var}: ${2:value}
endsnippet

# Useful complete snippets
snippet role_defaults "Role defaults" b
${1:name}_package: ${2:name}

$1_service: ${3:$2}
$1_manage_service: yes
$1_started: yes

$1_config: ${4:/etc/${5:$2/$2.conf}}
$1_manage_config: ${6:no}
$1_config_template: ${7:${8:$2.conf}.j2}
endsnippet

snippet role_defaults_lookup "Role defaults from lookup" b
${1:name}_package: "{{ $1_lookup.package }}"

$1_service: "{{ $1_lookup.service }}"
$1_manage_service: yes
$1_started: yes

$1_config: "{{ $1_lookup.config }}"
$1_manage_config: ${2:no}
$1_config_template: "{{ $1_lookup.config_template }}"
endsnippet

snippet role_lookup "Map distributions" b
${1:name}_map:
	defaults:
		package: ${2:name}
		service: ${3:$2}
		config: ${4:/etc/${5:$2/$2.conf}}
		config_template: ${6:${7:$2.conf}.j2}
	${8:os_family}: {}

$1_lookup: "{{ $1_map.defaults | combine(
		$1_map.$8[ansible_facts.$8]|default({})
	) }}"
endsnippet

snippet map_by "New level of merging for distribution mapping" b
${1:name}_map.${2:distribution}[ansible_facts.$2]|default({})
endsnippet

snippet var_lookup "Lookup var in mapping" b
${1:name}_${2:variable}: "{{ $1_lookup['$2'] }}"
endsnippet

snippet package_install "Install package" b
- name: install ${1:name} package
	package:
		name: "{{ ${2:$1}_package }}"
endsnippet

snippet service_manage "Manage service if variable is True" b
- name: manage ${1:name} service
	service:
		name: "{{ ${2:$1}_service }}"
		enabled: "{{ $2_started }}"
		state: "{{ $2_started|bool | ternary('started', 'stopped') }}"
	when: $2_manage_service|bool
endsnippet

snippet config_manage "Manage config if variable is True" b
- name: manage ${1:name} config
	template:
		dest: "{{ ${2:$1}_config }}"
		src: "{{ $2_config_template }}"
		owner: ${3:root}
		group: ${4:root}
		mode: ${5:0644}
	notify: ${6:${7:reload} ${8:$1}}
	when: $2_manage_config|bool
endsnippet

snippet service_handler "Handler for service in role" b
- name: ${1:${2:reload} ${3:name}}
	service:
		name: "{{ ${4:$3}_service }}"
		state: ${5:$2ed}
	when:
		- $3_manage_service|bool
		- $3_started|bool
endsnippet
